1 == Selection and projection query ==
  REQ: pick one query of this category and provide an interface for the user to specify the selection condition and the attributes to be returned.
  - Rerun with another constant
  QUERY: T1

2 == Join query ==
  REQ: pick one query of this category and provide an interface for the user to choose this query.
  QUERY: T0

3 == Division query ==
  REQ: pick one query of this category and provide an interface for the user to choose this query.
  - Insert a new tuple and rerun
  QUERY: A4

4 == Aggregation query ==
  REQ: pick one query that requires the use of aggregation (min, max, average, or count are all fine).
  - Rerun with a different aggregation
  QUERY: T2, A1

5 == Nested aggregation with group-by ==
  REQ: pick one query that finds the average for each group and then finds either the minimum or maximum across all those averages. Provide an interface for the user to specify whether the minimum or maximum is requested.
  - Show query or view
  - Rerun with a different aggregation
  QUERY: A2

6 == Delete operation ==
  REQ: implement a cascade-on-delete situation. Provide an interface for the user to specify some input for the deletion operation. Some input values would fail the cascade specification but others would successfully follow the cascade specification. Provide an interface for the user to display the relation instance after the operation.
  - Case 1 - deletion causing cascades. Student to explain policy regarding blocking and show their code that implements this
  - Case 2 â€“ deletion without cascade
  QUERY: A3, T5
  *** Host 22 has no postings and no contracts, deleting host 22 will just delete itself.
  *** Host 21 has postings but has no contracts, deleting host 21 will cascade deleting all its postings.
  *** Host 3 has contracts, so deleting host 3 will be blocked.

7 == Update operation ==
  REQ: implement a constraint using the check statement. Provide an interface for the user to specify some input for the update operation. Some input values would successfully satisfy a constraint while others would fail. Provide an interface for the user to display the relation after the operation.
  - Update a value that violates some constraint
  - Correct the value and update again
  QUERY: H3

8 == Graphical user interface ==
  REQ: create an easy to use GUI that allows the users to execute all the above operations and transactions. Use the menu facility provided    by the graphics environment you use to define appropriate menus and submenus. Make sure to design your interface in such a way that all the error messages appear in separate pop-up boxes, or in a designated area of the main window, so that they do not interfere with the other activities. Whenever user input is requested, make sure that there is sufficient type checking.
  - [ ] Type  checking
  - [ ] Location  of  error   messages
  - [ ] Look  of  GUI

9 == Extra features ==
  REQ: Create unique features that your application supports. You can really be creative about this. Some examples are using Bootstrap to prettify your UI, implementing Triggers and Privileges in the database, using any cloud-based databases. See the marking scheme for more examples and the breakdown.

  -- we implemented trigger for checking that hosts do not have overlapping postings and contracts.
  -- we used opensource swingx extension to prettify our date picker.